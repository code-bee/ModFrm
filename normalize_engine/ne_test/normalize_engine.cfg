
[common]
#文本模式：    0 -- 第一组必需从串的起始（^）开始，非流模式，1 -- 第一组从特定分隔符开始，文本模式
text_mode = 1

#判断group set匹配结束的方式: 0:next_group/1:text_end/2:max_chars
#next_group: 出现了另一个group set的start flag后即停止当前group set的匹配
#text_end：如果未匹配完成，一直匹配到文本结束
#max_chars：匹配到指定长度后如果还没有匹配成功则匹配结束
#如果选择max_chars方式，每个group set需要定义自己的最大范围。如果没有定义，沿用全局默认的default_max_chars
ending_mode = 0

#默认的max_chars
#default_max_chars = 1000

#是否大小写敏感
case_sensitive = 0

#预分配内存大小（单位：KB字节）
#engine_size：引擎内存，handle_size：match_handle的内存
engine_size = 1024
handle_size = 1024

#通配符编号的长度
#pattern_id_len = 1						#sequencial id length

#各种通配符。head_flag ^和tail_flag $不需要用户自定义，因为它们并不在任何串中出现，只是配置文件中的代号
#任何出现在通配符中的字符在规则中出现时如果不代表通配符含义，都需要反斜杠转义
#multi_seg_wildcard = "**"
#single_seg_wildcard = "$$"
#multi_char_wildcard = "*"
#single_char_wildcard = "$"

#定义转义前导符，默认为\。转义前导符不得和任何分隔符、通配符中的字符相同；且只会出现在match_rule的配置项中
#其作用是在必要时对规则串中出现的，与分隔符、通配符中字符相同的字符进行转义
#规则串的转义前导符和其后字符组成的双字符所代表的字符就是其后的那个字符
#分隔符、通配符定义中都不会出现转移字符（\r,\t,\\之类的例外，这些虽然看起来有转义，但实际上就是单字符），
#输入串中同样不会出现转义字符，这是因为在对规则进行解析后，转义字符都被还原成原始字符了
#注意，escape_char是单字符，不要加引号
#escape_char = \

[group_set]
#定义组间顺序，用逗号分隔
group_order = "title,title"		#group order, seperated by “,”. so “,” is not included in group name

#必需出现的组。可以有多个essential group，按照group order的顺序，以逗号隔开。
#essential_group以数字顺序标记，而不是group name。比如下面essential_group为2，表示第二个title是必需的
#第一个essential_group的start_flag就是该group set的起始标记。
#如果第一个essential group不是group order中的第一个组，可以考虑支持回溯功能
essential_group = "2"

#最大匹配长度，仅当ending_mode为max_chars有效
#max_chars = 1000

#组分隔符复用模式：0 -- 非复用模式，1 -- 复用模式。默认为非复用模式
group_delim_reuse = 0

#单组的group set，如果reuse为0，可以省略不写
#[group_set]
#group_numbers = 1 						
#group_order = "html_tag"
#essential_group = "1"
#group_delim_reuse = 0


[group]
name = html_tag	#group name

#组起始/结束标记，必须用双引号引起。如果有多个标记，用逗号分隔。如果逗号自身是标记，用反斜杠转义
#分隔符不限定为单字符，可以是字符串
#配置文件注释符#如果是标记，在引号内部出现时不需要转义。分隔符支持\t,\r,\n的写法。
#标记^和$表示输入串（规则串，待规则化串）的起始和结束。start/end flag中的$和规则串中的$含义不同，需注意
#start/end flag只对,支持反斜杠转义，对其他字符不转义
start_flag = "<"						#group start flag. multi-start_flag is supported, which is seperated by ,
end_flag = ">"					#group end flag. if , is one kind of start/end flag, a leading backslash(\) is necessary: \,

#组内如果包含段，seg_delim定义段分隔符。
#和start_flag, end_flag一样，如果有多个段分隔符，用逗号分隔，同样不限定为单字符。段分隔符没有起始和结束的区别。
seg_delim = " ,\t"							

#段是否是有序的。如果段是无序的，只要规则中定义的各个部分都匹配到就认为匹配成功；
#如果段是有序的，不仅需要各部分都匹配成功，还要保持匹配顺序
seg_in_order = 0

[group]
name = title
start_flag = <title>
end_flag = "</title>"
seg_delim = ""
seg_in_order = 1

#<title>京东网上商城-综合网购首选（JD.COM）-正品低价、品质保障、货到付款、配送及时、放心服务、轻松购物！</title>
[rule]
match_rule = "<meta name=*description* content=*1>"
normal_rule = *1

[rule]
match_rule = "<meta name=*keywords* content=*1>"
normal_rule = *1

[rule]
match_rule = "<title>*1</title>"
normal_rule = *1
#支持规则串对规则字符*,$的转义，前面加上反斜杠\即表示*或$的本义。
#如果url中包括#，用引号括起来即可
#[rule]
#match_rule = "**//www.amazon.cn/**/gp/product/$$1/**"
#normal_rule = http://www.amazon.cn/gp/product/$$1

#for test



